<?xml version="1.0" encoding="UTF-8"?>
<statements>
	<statement id="1">Understanding the rationale behind changes is mandatory to avoid the bugs introduction. </statement>
	<statement id="2">Changes that neglect non-functional requirements are more likely to introduce bugs.</statement>
	<statement id="3">Having documentation associated with source code is decisive for developers to avoid bug-introducing changes on it.</statement>
	<!--
	<statement id="4">Familiarity of developers with source code is mandatory to avoid bug-introducing changes.</statement>
	<statement id="5">Changes involving a large number of files are more likely to introduce bugs.</statement>
	<statement id="6">When reviewing a change, reviewers need to be aware of all artifacts impacted by this change to avoid the introduction of bugs. </statement>
	<statement id="7">Changes invoking a high number of features (methods, fields, classes) are more likely to introduce bugs </statement>
	<statement id="8">Changes with high test coverage introduce less bugs.</statement>
	<statement id="9">Having a testing team is mandatory to avoid bug-introducing changes.</statement>
	<statement id="10">Automated testing reduces considerably the introduction of bugs.</statement>
	<statement id="11">Manual tests verify which changes meet user requirements. Therefore, manual testing is mandatory to avoid bugs. </statement>
	<statement id="12">Continuous integration is mandatory to avoid bug-introducing changes.</statement>
	<statement id="13">Using software quality assurance (SQA) methods in the code review process is decisive to avoid bug-introducing changes</statement>
	<statement id="14">Changes that break the software architectural design are more likely to introduce bugs.</statement>
	<statement id="15">Changes containing code smells are more likely to introduce bugs.</statement>
	<statement id="16">Avoiding recurring changes reduce the introduction of bugs.</statement>
	<statement id="17">Before accepting pull-requests, it is mandatory to compile and run the system with the changes to avoid the introduction of bugs.</statement>
	<statement id="18">Familiarity of developers with the programming language adopted in a project is mandatory to avoid bugs.</statement>
	<statement id="19">Code reviews reduce considerably the introduction of bugs.</statement>
	<statement id="20">Developers working on legacy code introduce more bugs.</statement>
	<statement id="21">Adopting pair programming is decisive to avoid bug-introducing changes.</statement>
	<statement id="22">Agile methods aim at reducing the delivery lifecycle. Therefore, when adopting these methods, developers are more likely to perform bug-introducing changes.</statement>
	<statement id="23">Code snippets frequently changed are hotspots of bugs.</statement>
	<statement id="24">Understanding the software history is mandatory for developers to avoid the introduction of bugs.</statement>
	<statement id="25">Code reuse avoids the introduction of bugs.</statement>
	<statement id="26">Handling the exceptions associated with a change is mandatory to avoid the introduction of bugs.</statement>
	<statement id="27">Using static analysis tools is decisive to avoid bug-introducing changes. </statement>
	<statement id="28">Experienced developers introduce less bugs.</statement>
	<statement id="29">Fixing bugs is riskier (more likely to introduce bugs) than adding new features.</statement>
	<statement id="30">Floss refactorings tend to introduce bugs. This refactoring consists of refactoring the code together with non-structural changes as a means to reach other goals, such as adding features or removing bugs.</statement>
	<statement id="31">Root-canal refactorings are less prone to introduce bugs. This refactoring is used for strictly improving the source code structure and consists of pure refactoring.</statement>
	<statement id="32">Adaptive changes are more likely to introduce bugs. These changes aim at migrating systems to a new version of a third party API.</statement>
	<statement id="33">Developers working on his own code are less likely to introduce bugs. </statement>
	<statement id="34">Merge commits introduce more bugs than other commits.</statement>
	<statement id="35">Conflicting changes introduce more bugs than non-conflicting ones. </statement>
	<statement id="36">Developers working on code snippets containing third-party APIs tend to introduce bugs. </statement>
	<statement id="37">Introduction of bugs depends on which programming language is used.</statement>
	<statement id="38">Geographically distributed teams introduce more bugs than teams that are not geographically distributed.</statement>
	<statement id="39">Developer's specific experience in the project is more decisive to avoid the introduction of bugs than overall general experience in programming.</statement>
	<statement id="40">Code written in a language with static typing (e.g., C#) introduces fewer bugs than code written in a language with dynamic typing (e.g., Python).</statement>
	<statement id="41">Code snippet changed by different developers is hotspot of bugs.</statement>
	-->
</statements>